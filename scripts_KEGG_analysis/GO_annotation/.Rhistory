write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v3/all_DESeq2.DE_results.all_Mock_vs_delta8K-PMTVWT_gseKEGG_join_all-0.05.tsv", row.names=T, sep="\t")
geneList
DE.table
geneList
names(geneList)
geneList
dedup_ids
kegg_gene_list <
kegg_gene_list
names(kegg_gene_list) <- dedup_ids$Gene
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
kegg_gene_list
kegg_gene_list
dedup_ids = DE.table[!duplicated(DE.table[c("Gene")]),]
dedup_ids
kegg_gene_list
# Create a vector of the gene unuiverse
kegg_gene_list <- dedup_ids$FC
kegg_gene_list
FC <- list(-7.32879866507124
-5.28350562819216
-4.63797056540411
4.58314783280967
6.59145761328188
3.82951537896988
-3.37791774526434
2.55935222927313
-4.51768390739989
-1.52269467367073
1.68155363092669
-6.94116190585342
-2.05180214934248
-1.59263358071062
-1.6629954742039 )
FC <- list(-7.32879866507124,-5.28350562819216,-4.63797056540411,4.58314783280967,6.59145761328188,3.82951537896988,-3.37791774526434,2.55935222927313,-4.51768390739989,-1.52269467367073,1.68155363092669,-6.94116190585342,-2.05180214934248,-1.59263358071062,-1.6629954742039 )
GID <- list(110705541,110707521,110720265,110689017,110730583,110721053,110693760,110720132,110685039,110701378,110732154,110737020,110691966,110711511,110695081)
FC <- list(-7.32879866507124,-5.28350562819216,-4.63797056540411,4.58314783280967,6.59145761328188,3.82951537896988,-3.37791774526434,2.55935222927313,-4.51768390739989,-1.52269467367073,1.68155363092669,-6.94116190585342,-2.05180214934248,-1.59263358071062,-1.6629954742039 )
GID
GID <- c(110705541,110707521,110720265,110689017,110730583,110721053,110693760,110720132,110685039,110701378,110732154,110737020,110691966,110711511,110695081)
FC <- c(-7.32879866507124,-5.28350562819216,-4.63797056540411,4.58314783280967,6.59145761328188,3.82951537896988,-3.37791774526434,2.55935222927313,-4.51768390739989,-1.52269467367073,1.68155363092669,-6.94116190585342,-2.05180214934248,-1.59263358071062,-1.6629954742039 )
GID
names(FC) <- GID
FC
FC = sort(FC, decreasing = TRUE)
FC
BiocManager::install("enrichKEGG")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("KEGGprofile")
BiocManager::install("enrichKEGG")
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
kk2 <- gseKEGG(geneList     = FC,
organism     = 'cqi',
nPerm        = 10000,
minGSSize    = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none")
kk2 <- gseKEGG(geneList     = FC,
organism     = 'cqi',
nPerm        = 10000,
minGSSize    = 3,
pvalueCutoff = 0.05,
pAdjustMethod = "none")
kk2 <- gseKEGG(geneList     = FC,
organism     = 'cqi',
nPerm        = 10000,
minGSSize    = 3,
pvalueCutoff = 0.1,
pAdjustMethod = "none")
kk2 <- gseKEGG(geneList     = FC,
organism     = 'cqi',
pAdjustMethod = "none")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("KEGGprofile")
BiocManager::install("enrichKEGG")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("KEGGprofile")
BiocManager::install("enrichKEGG")
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_anno_KEGG-In.tsv")
#DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
#########################################################
#Prepare Input
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids = DE.table[!duplicated(DE.table[c("Gene")]),]
# Create a vector of the gene unuiverse
kegg_gene_list <- dedup_ids$FC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- dedup_ids$Gene
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
kk2 <- gseKEGG(geneList     = kegg_gene_list,
organism     = 'nta',
nPerm        = 10000,
minGSSize    = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none")
head(kk2, n = 20L)
#Merge DF
outdat_PM <- kk2
outdat_delta <- kk2
joined_df <- merge(outdat_PM, outdat_delta, by.x = "ID",
by.y = "ID", all.x = T, all.y = T)
###plot
require(DOSE)
dotplot(kk2, showCategory = 10, title = "Enriched Pathways" , split=".sign") + facet_grid(.~.sign)
dotplot(outdat_PM , showCategory = 24, title = "Enriched Pathways in PMTVWT" , split=".sign") + facet_grid(.~.sign)
outdat_PM <- kk2
outdat_PM
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
#########################################################
#Prepare Input
# remove duplicate IDS (here I use "ENSEMBL", but it should be whatever was selected as keyType)
dedup_ids = DE.table[!duplicated(DE.table[c("Gene")]),]
# Create a vector of the gene unuiverse
kegg_gene_list <- dedup_ids$FC
# Name vector with ENTREZ ids
names(kegg_gene_list) <- dedup_ids$Gene
# omit any NA values
kegg_gene_list<-na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
#Create gseKEGG object
kk2 <- gseKEGG(geneList     = kegg_gene_list,
organism     = 'nta',
nPerm        = 10000,
minGSSize    = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none")
head(kk2, n = 20L)
outdat_delta <- kk2
joined_df <- merge(outdat_PM, outdat_delta, by.x = "ID",
by.y = "ID", all.x = T, all.y = T)
dotplot(outdat_delta, showCategory = 24, title = "Enriched Pathways in Delta8K" , split=".sign") + facet_grid(.~.sign)
write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.delta8K-PMTVWT-vs-Mock_gseKEGG_join_all-0.05.tsv", row.names=T, sep="\t")
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
BiocManager::install("enrichKEGG")
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_anno_KEGG-In.tsv")
#DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
## assume that 1st column is ID
## 2nd column is fold change
## feature 1: numeric vector
geneList <- DE.table[,2]
## feature 2: named vector
names(geneList) <- as.character(DE.table[,1])
## feature 3: decreasing order
geneList <- sort(geneList, decreasing = TRUE)
#######
#6.1 KEGG over-representation test
#data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 1]
kk <- enrichKEGG(gene         = gene,
organism     = 'nta',
pvalueCutoff = 0.05)
head(kk)
outdat_PM <- kk
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
## assume that 1st column is ID
## 2nd column is fold change
## feature 1: numeric vector
geneList <- DE.table[,2]
## feature 2: named vector
names(geneList) <- as.character(DE.table[,1])
## feature 3: decreasing order
geneList <- sort(geneList, decreasing = TRUE)
#######
#6.1 KEGG over-representation test
#data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 1]
kk <- enrichKEGG(gene         = gene,
organism     = 'nta',
pvalueCutoff = 0.05)
head(kk)
outdat_delta <- kk
joined_df <- merge(outdat_PM, outdat_delta, by.x = "ID",
by.y = "ID", all.x = T, all.y = T)
#dataframe3 <- merge(outdat_PM, outdat_delta, by=c("pathway.code"),all=TRUE)
write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.delta8K-PMTVWT-vs-Mock_enrichKEGG_join_all-0.05.tsv", row.names=T, sep="\t")
mkk <- enrichMKEGG(gene = gene,
organism = 'nta')
head(mkk)
mkk2 <- gseMKEGG(geneList = geneList,
organism = 'nta')
head(mkk2)
BiocManager::install("enrichKEGG")
library(clusterProfiler)
library(dplyr)
library(enrichKEGG)
library(KEGGprofile)
library(KEGGREST)
pathways.list <- keggList("pathway", "nta")
head(pathways.list)
# Pull all genes for each pathway
pathway.codes <- sub("path:", "", names(pathways.list))
genes.by.pathway <- sapply(pathway.codes,
function(pwid){
pw <- keggGet(pwid)
if (is.null(pw[[1]]$GENE)) return(NA)
pw2 <- pw[[1]]$GENE[c(TRUE,FALSE)] # may need to modify this to c(FALSE, TRUE) for other organisms
pw2 <- unlist(lapply(strsplit(pw2, split = ";", fixed = T), function(x)x[1]))
return(pw2)
}
)
head(genes.by.pathway)
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_anno_KEGG-In.tsv")
#DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
write.table(outdat, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_KEGGREST.tsv", row.names=T, sep="\t")
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
##
# GeneList filtered
#geneList <- (DE.table %>% filter(P.Value < "0.05") %>% select(P.Value))[,1]
#names(geneList) <-(DE.table %>% filter(P.Value < "0.05") %>% select(Gene))[,1]
#head(geneList)
#Apply Wilcoxon rank-sum test to each pathway, testing if “in” p-values are smaller than “out” p-values:
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
#write.table(outdat, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.P5e-2_C1.0_Mock_vs_PMTVWT_anno_pars_KEGG-In_KEGGREST.tsv", row.names=T, sep="\t")
#write.table(outdat, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.P5e-2_C1.0_Mock_vs_delta8K_anno_pars_KEGG-In_KEGGREST.tsv", row.names=T, sep="\t")
#write.table(outdat, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_KEGGREST.tsv", row.names=T, sep="\t")
write.table(outdat, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.delta8K-vs-Mock_KEGGREST.tsv", row.names=T, sep="\t")
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.PMTVWT-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
##
# GeneList filtered
#geneList <- (DE.table %>% filter(P.Value < "0.05") %>% select(P.Value))[,1]
#names(geneList) <-(DE.table %>% filter(P.Value < "0.05") %>% select(Gene))[,1]
#head(geneList)
#Apply Wilcoxon rank-sum test to each pathway, testing if “in” p-values are smaller than “out” p-values:
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
outdat_PM <- outdat
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.Delta8K-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
##
# GeneList filtered
#geneList <- (DE.table %>% filter(P.Value < "0.05") %>% select(P.Value))[,1]
#names(geneList) <-(DE.table %>% filter(P.Value < "0.05") %>% select(Gene))[,1]
#head(geneList)
#Apply Wilcoxon rank-sum test to each pathway, testing if “in” p-values are smaller than “out” p-values:
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
outdat_delta <- outdat
joined_df <- merge(outdat_PM, outdat_delta, by.x = "pathway.code",
by.y = "pathway.code", all.x = T, all.y = T)
write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.all_delta8K-PMTVWT_vs_Mock_KEGGREST_join_all.tsv", row.names=T, sep="\t")
write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_Delta8K-and-PMTVWT_vs_Mock_KEGGREST_join_all.tsv", row.names=T, sep="\t")
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.P5e-2_C1.0_PMTVWT-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
##
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
outdat_PM <- outdat
DE.table <- read.delim("/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_DESeq2.DE_results.P5e-2_C1.0_Delta8K-vs-Mock_anno_KEGG-In.tsv")
DE.table_rmdup = DE.table[!duplicated(DE.table[c("Gene")]),]
geneList <- DE.table_rmdup$P.Value
#geneList <- DE.table$FDR
names(geneList) <- DE.table_rmdup$Gene
head(geneList)
##
# GeneList filtered
#geneList <- (DE.table %>% filter(P.Value < "0.05") %>% select(P.Value))[,1]
#names(geneList) <-(DE.table %>% filter(P.Value < "0.05") %>% select(Gene))[,1]
#head(geneList)
#Apply Wilcoxon rank-sum test to each pathway, testing if “in” p-values are smaller than “out” p-values:
# Wilcoxon test for each pathway
pVals.by.pathway <- t(sapply(names(genes.by.pathway),
function(pathway) {
pathway.genes <- genes.by.pathway[[pathway]]
list.genes.in.pathway <- intersect(names(geneList), pathway.genes)
list.genes.not.in.pathway <- setdiff(names(geneList), list.genes.in.pathway)
scores.in.pathway <- geneList[list.genes.in.pathway]
scores.not.in.pathway <- geneList[list.genes.not.in.pathway]
myvector <- paste(list.genes.in.pathway, collapse = '/')
if (length(scores.in.pathway) > 0){
p.value <- wilcox.test(scores.in.pathway, scores.not.in.pathway, alternative = "less")$p.value
#print(p.value)
#print(scores.in.pathway)
#print(p.value)
#print(scores.not.in.pathway)
} else{
p.value <- NA
}
return(c(p.value = p.value, Annotated = length(list.genes.in.pathway), Annotated_tot = length(pathway.genes), Annotated_genelist = myvector ))
}
))
# Assemble output table
outdat <- data.frame(pathway.code = rownames(pVals.by.pathway))
outdat$pathway.name <- pathways.list[outdat$pathway.code]
outdat$p.value <- pVals.by.pathway[,"p.value"]
outdat$Annotated <- pVals.by.pathway[,"Annotated"]
outdat$Annotated_tot <- pVals.by.pathway[,"Annotated_tot"]
outdat$Annotated_genelist <- pVals.by.pathway[,"Annotated_genelist"]
outdat <- outdat[order(outdat$p.value),]
head(outdat)
outdat_delta <- outdat
joined_df <- merge(outdat_PM, outdat_delta, by.x = "pathway.code",
by.y = "pathway.code", all.x = T, all.y = T)
joined_df
write.table(joined_df, file = "/Volumes/Mac_HD2/proj_Ramesh/RNA-seq_2020/RESULTS_2020_v4/all_Delta8K-and-PMTVWT_vs_Mock_KEGGREST_join_DE-pval-0.05.tsv", row.names=T, sep="\t")
geneList <- DE.table_rmdup$P.Value
geneList
